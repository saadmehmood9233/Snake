<%- include ../partials/head.ejs %>

<br><br>

<div class="row">
    <div class="col col-sm-6">
        <div id="snake-game" class="game-container">
            <canvas></canvas>
        </div>
    </div>
    <div class="col col-sm-6">
        <div id="editor">using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;


class Program
{
    static void Main(string[] args)
    {
        string input = Console.ReadLine();
        string[] inputs = input.Split('|');

        // Direction in which snake is moving
        // 0: left, 1: up, 2: right, 3: down
        int direction = Int32.Parse(inputs[2]);
        string[] food_points = inputs[0].Split(' ');
        int foodX = Int32.Parse(food_points[0]);    // Food point possition X
        int foodY = Int32.Parse(food_points[1]);    // Food point possition Y


        string[] dat = inputs[1].Split(',');
        int[][] queue = new int[dat.Length][];      // List of player points [[X,Y], [X,Y]]

        for (int j = 0; j < dat.Length; j++)
        {
        queue[j] = new int[2];
        string[] player_points = dat[j].Split(' ');

        queue[j][0] = Int32.Parse(player_points[0]);
        queue[j][1] = Int32.Parse(player_points[1]);
        }

        // Write Your Code here
        // Warning: Please do not change code above :)
        Console.WriteLine("5 3");
    }
}

        </div>
    </div>
</div>

<button class="btn btn-primary btn-lg" onclick="run()">Run</button>

<%- include ../partials/scripts.ejs%>
<script src="assets/ace/ace.js" type="text/javascript" charset="utf-8"></script>
<script src="assets/ace/ext-language_tools.js"></script>
<script>
    var editor = null;
    $(document).ready(function () {
        editor = ace.edit("editor");
        editor.$blockScrolling = Infinity;
        editor.setOptions({
            wrap: true,
            highlightActiveLine: true,
            showPrintMargin: false,
            theme: 'ace/theme/tomorrow_night',
            mode: 'ace/mode/csharp',
            enableLiveAutocompletion: true
        })
    });

    function run() {
        $("button").attr("disabled", true);
        var user_code = "";


        var ctx;
        var turn  = [];
        var xV = [-1, 0, 1, 0];
        var yV = [0, -1, 0, 1];
        var queue = [];
        var elements = 1;
        var map = [];
        var X = 5 + (Math.random() * (45 - 10))|0;
        var Y = 5 + (Math.random() * (30 - 10))|0;
        var direction = Math.random() * 3 | 0;
        var interval = 0;
        var score = 0;
        var inc_score = 50;
        var sum = 0, easy = 0;
        var i, dir;

        var count = 1;
        var position = direction;
        var food = [];


        var canvas = $('#snake-game>canvas')[0];
        for (i = 0; i < 45; i++) {
            map[i] = [];
        }
        canvas.setAttribute('width', 45 * 10);
        canvas.setAttribute('height', 30 * 10);
        ctx = canvas.getContext('2d');
        function placeFood() {
            var x, y;
            do {
                x = Math.random() * 45|0;
                y = Math.random() * 30|0;
            } while (map[x][y]);
            map[x][y] = 1;
            food[0] = x;
            food[1] = y;
            ctx.strokeRect(x * 10 + 1, y * 10 + 1, 10 - 2, 10 - 2);
        }
        placeFood();
        function clock() {


            if(count != 0){
                move(position);
                if (easy) {
                    X = (X+45)%45;
                    Y = (Y+30)%30;
                }
                --inc_score;
                if (turn.length) {
                    dir = turn.pop();
                    if ((dir % 2) !== (direction % 2)) {
                        direction = dir;
                    }
                }
                if (
                        (easy || (0 <= X && 0 <= Y && X < 45 && Y < 30))
                        && 2 !== map[X][Y]) {
                    if (1 === map[X][Y]) {
                        score+= Math.max(5, inc_score);
                        inc_score = 50;
                        placeFood();
                        elements++;
                    }
                    ctx.fillRect(X * 10, Y * 10, 10 - 1, 10 - 1);
                    map[X][Y] = 2;
                    queue.unshift([X, Y]);

                    X+= xV[direction];
                    Y+= yV[direction];
                    if (elements < queue.length) {
                        dir = queue.pop()
                        map[dir[0]][dir[1]] = 0;
                        ctx.clearRect(dir[0] * 10, dir[1] * 10, 10, 10);
                    }

                    // String to pass user program
                    var input = food[0] + " " + food[1];
                    input += "|";

                    for(var i = 0; i < queue.length; i++) {
                        if(i < queue.length - 1) {
                            input += queue[i][0] + " " + queue[i][1] + ",";
                        } else {
                            input += queue[i][0] + " " + queue[i][1];
                        }
                    }

                    input += "|";
                    input += direction;
                    user_code = editor.getValue();
                    user_code = user_code.replace("Console.ReadLine()", "\"" + input + "\"");
                    console.log(user_code);

                } else if (!turn.length) {
                    if (confirm("You lost! Play again? Your Score is " + score)) {
                        ctx.clearRect(0, 0, 450, 300);
                        queue = [];
                        elements = 1;
                        map = [];
                        X = 5 + (Math.random() * (45 - 10))|0;
                        Y = 5 + (Math.random() * (30 - 10))|0;
                        direction = Math.random() * 3 | 0;
                        score = 0;
                        inc_score = 50;
                        for (i = 0; i < 45; i++) {
                            map[i] = [];
                        }
                        placeFood();
                    } else {
                        window.clearInterval(interval);
                        $("button").attr("disabled", false);
                    }
                }
                count--;
            } else {
                var res = JSON.parse($.ajax({
                    type: "POST",
                    url: "/api/compile",
                    data : JSON.stringify({code: user_code}),
                    contentType: "application/json",
                    dataType: "json",
                    async: false
                }).responseText).data.split(' ');
;;
                count = parseInt(res[0]);
                position = parseInt(res[1]);
                //console.log("Count: " + count + " Position: " + position);
            }


        }
        interval = window.setInterval(clock, 60);
        function move (position) {
            var code = position;
            /*
             * 0: left
             * 1: up
             * 2: right
             * 3: down
             **/
            if (0 <= code && code < 4 && code !== turn[0]) {
                turn.unshift(code);
            } else if (-5 == code) {
                if (interval) {
                    window.clearInterval(interval);
                    interval = null;
                } else {
                    interval = window.setInterval(clock, 60);
                }
            } else { // O.o
                dir = sum + code;
                if (dir == 44||dir==94||dir==126||dir==171) {
                    sum+= code
                } else if (dir === 218) easy = 1;
            }
        }
    }

</script>

<%- include ../partials/footer.ejs %>